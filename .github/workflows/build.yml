name: Build Application

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.11']
        include:
          - os: windows-latest
            asset_name: ai-auto-free-windows.zip
            asset_path: dist/
            executable_name: "AI Auto Free.exe"
          - os: ubuntu-latest
            asset_name: ai-auto-free-linux.zip
            asset_path: dist/
            executable_name: "AI Auto Free"
          - os: macos-latest
            asset_name: ai-auto-free-macos.zip
            asset_path: dist/
            executable_name: "AI Auto Free"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Set PYTHONPATH
      if: matrix.os != 'windows-latest'
      run: |
        echo "PYTHONPATH=${{ github.workspace }}/src" >> $GITHUB_ENV
      shell: bash

    - name: Set PYTHONPATH (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "PYTHONPATH=${{ github.workspace }}\src" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: pwsh

    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $env:PYTHONPATH = "${{ github.workspace }};${{ github.workspace }}/src"
        pyinstaller --clean --noconfirm build.spec
      shell: pwsh

    - name: Build with PyInstaller (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        export PYTHONPATH="${{ github.workspace }}:${{ github.workspace }}/src"
        pyinstaller --clean --noconfirm build.spec
      shell: bash

    - name: Create ZIP archive
      run: |
        cd dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../${{ matrix.asset_name }} "${{ matrix.executable_name }}"
        else
          zip -r ../${{ matrix.asset_name }} "${{ matrix.executable_name }}"
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build
        path: ${{ matrix.asset_name }}
        if-no-files-found: error

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{ matrix.asset_name }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
